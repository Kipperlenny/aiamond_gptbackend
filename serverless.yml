service: aiamond-gptbackend

provider:
  name: aws
  runtime: python3.11
  region: eu-central-1
  profile: default
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    GPT3_MODEL: ${env:GPT3_MODEL}
    GPT4_MODEL: ${env:GPT4_MODEL}
  memorySize: 128 # minimum memory size for Lambda
  timeout: 18 # timeout for Lambda
  logRetentionInDays: 7 # keep logs for 7 days
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
    layer: true
    noDeploy:
      - boto3
  dotenv:
    path: .env

package:
  include:
    - app.py
  exclude:
    - node_modules/**
    - venv/**

resources:
  Resources:
    ApiGatewayUser:
      Type: 'AWS::IAM::User'
    ApiGatewayUserPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: 'ApiGatewayUserPolicy'
        Users:
          - Ref: ApiGatewayUser
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource: '*'
    ApiGatewayUserAccessKey:
      Type: 'AWS::IAM::AccessKey'
      Properties:
        UserName:
          Ref: ApiGatewayUser
    ConversationsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'Conversations'
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  app:
    handler: wsgi_handler.handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /
          method: ANY
          authorizer: aws_iam
      - http:
          path: '{proxy+}'
          method: ANY
          authorizer: aws_iam